java

package com.example.beerstockapi.service;

import com.example.beerstockapi.entity.Beer;
import com.example.beerstockapi.exception.BeerAlreadyRegisteredException;
import com.example.beerstockapi.exception.BeerNotFoundException;
import com.example.beerstockapi.exception.BeerStockExceededException;
import com.example.beerstockapi.mapper.BeerMapper;
import com.example.beerstockapi.repository.BeerRepository;
import com.example.beerstockapi.dto.BeerDTO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class BeerService {

    private final BeerRepository beerRepository;
    private final BeerMapper beerMapper = BeerMapper.INSTANCE;

    @Autowired
    public BeerService(BeerRepository beerRepository) {
        this.beerRepository = beerRepository;
    }

    public BeerDTO createBeer(BeerDTO beerDTO) throws BeerAlreadyRegisteredException {
        verifyIfIsAlreadyRegistered(beerDTO.getName());
        Beer beer = beerMapper.toModel(beerDTO);
        Beer savedBeer = beerRepository.save(beer);
        return beerMapper.toDTO(savedBeer);
    }

    public BeerDTO findBeerById(Long id) throws BeerNotFoundException {
        Beer beer = verifyIfExists(id);
        return beerMapper.toDTO(beer);
    }

    public List<BeerDTO> listAll() {
        return beerRepository.findAll()
                .stream()
                .map(beerMapper::toDTO)
                .collect(Collectors.toList());
    }

    private void verifyIfIsAlreadyRegistered(String name) throws BeerAlreadyRegisteredException {
        Optional<Beer> optSavedBeer = beerRepository.findByName(name);
        if (optSavedBeer.isPresent()) {
            throw new BeerAlreadyRegisteredException(name);
        }
    }

    private Beer verifyIfExists(Long id) throws BeerNotFoundException {
        return beerRepository.findById(id)
                .orElseThrow(() -> new BeerNotFoundException(id));
    }
}
java

package com.example.beerstockapi.service;

import com.example.beerstockapi.entity.Beer;
import com.example.beerstockapi.exception.BeerAlreadyRegisteredException;
import com.example.beerstockapi.exception.BeerNotFoundException;
import com.example.beerstockapi.exception.BeerStockExceededException;
import com.example.beerstockapi.mapper.BeerMapper;
import com.example.beerstockapi.repository.BeerRepository;
import com.example.beerstockapi.dto.BeerDTO;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class BeerServiceTest {

    @Mock
    private BeerRepository beerRepository;

    @InjectMocks
    private BeerService beerService;

    @Test
    void whenBeerInformedThenItShouldBeCreated() throws BeerAlreadyRegisteredException {
        BeerDTO expectedBeerDTO = BeerDTOBuilder.builder().build().toBeerDTO();
        Beer expectedSavedBeer = beerMapper.toModel(expectedBeerDTO);

        when(beerRepository.findByName(expectedBeerDTO.getName())).thenReturn(Optional.empty());
        when(beerRepository.save(expectedSavedBeer)).thenReturn(expectedSavedBeer);

        BeerDTO createdBeerDTO = beerService.createBeer(expectedBeerDTO);

        assertEquals(expectedBeerDTO.getId(), createdBeerDTO.getId());
        assertEquals(expectedBeerDTO.getName(), createdBeerDTO.getName());
    }
}
Essas são implementações básicas de lógica de negócios e um exemplo de teste unitário utilizando JUnit e Mockito para o serviço de gerenciamento de cervejas
